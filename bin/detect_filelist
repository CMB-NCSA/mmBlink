#!/usr/bin/env python
import spt3g_detect.dtools as du
import argparse
import time


def cmdline():

    parser = argparse.ArgumentParser(description="spt3g transient detection")
    parser.add_argument("files", nargs='+',
                        help="Filename(s) to ingest")
    parser.add_argument("--outdir", type=str, action='store', default=None,
                        required=True, help="Location for output files")
    parser.add_argument("--clobber", action='store_true', default=False,
                        help="Clobber output files")

    parser.add_argument("--field", type=str, action='store', default=None,
                        help="Field name (i.e. SourceName) for automatically determining point source file to use.")
    parser.add_argument("--bands",  nargs='+', action='store', default=['90GHz', '150GHz'],
                        help="List of bands to use [90GHz, 150GHz, 200GHz]")
    parser.add_argument("--multi_detection", action='store_true', default=False,
                        help="Detection must be in both bands [90GHz, 150GHz]")
    parser.add_argument("--single_detection", action='store_true', default=False,
                        help="Detection per band alone")
    # Logging options (loglevel/log_format/log_format_date)
    default_log_format = '[%(asctime)s.%(msecs)03d][%(levelname)s][%(name)s][%(funcName)s] %(message)s'
    default_log_format_date = '%Y-%m-%d %H:%M:%S'
    parser.add_argument("--loglevel", action="store", default='INFO', type=str.upper,
                        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="Logging Level [DEBUG/INFO/WARNING/ERROR/CRITICAL]")
    parser.add_argument("--log_format", action="store", type=str, default=default_log_format,
                        help="Format for logging")
    parser.add_argument("--log_format_date", action="store", type=str, default=default_log_format_date,
                        help="Format for date section of logging")
    # Detection options
    parser.add_argument("--rms2D", action='store_true', default=False,
                        help="Perform 2D map of the rms using photutils Background2D StdBackgroundRMS")
    parser.add_argument("--rms2D_box", action='store', type=int, default=60,
                        help="Size of box using photutils Background2D StdBackgroundRMS")
    parser.add_argument("--rms2D_image", action='store_true', default=False,
                        help="Create a FITS image of the Background2D")
    parser.add_argument("--npixels", action='store', type=int, default=20,
                        help="Compress output files with astropy.io.fits.CompImageHDU")
    parser.add_argument("--nsigma_thresh", action='store', type=float, default=5.0,
                        help="Number of sigmas use to compute the detection threshold")
    parser.add_argument("--max_sep", action='store', type=float, default=35.0,
                        help="Maximum angular separation to match sources in arcsec")
    parser.add_argument("--plot", action='store_true', default=False,
                        help="Plot detection diagnostics?")
    # Use multiprocessing
    parser.add_argument("--np", action="store", default=1, type=int,
                        help="Run using multi-process, 0=automatic, 1=single-process [default]")
    parser.add_argument("--ntheads", action="store", default=1, type=int,
                        help="The number of threads used by numexpr 0=automatic, 1=single [default]")

    args = parser.parse_args()
    if args.multi_detection == args.single_detection:
        raise ValueError("Must set --multi_detection or --single_detection")

    args.bands.sort()
    return args


if __name__ == "__main__":

    # Keep time
    t0 = time.time()
    args = cmdline()
    d3w = du.detect_3gworker(**args.__dict__)
    d3w.run_detection_files()
    d3w.logger.info(f"Total time: {du.elapsed_time(t0)} for [run_detection_files]")
    if args.multi_detection:
        stacked_centroids = d3w.match_dual_bands()
        d3w.logger.info("Running unique centroids for [stacked_centroids]")
        stacked_centroids = du.find_unique_centroids(stacked_centroids, separation=args.max_sep, plot=args.plot)
    else:
        # Example 1, find all positions
        stacked_centroids = du.find_unique_centroids(d3w.cat, separation=args.max_sep, plot=args.plot)
    print(stacked_centroids)
    exit()

    # Example 1, find all positions
    stacked_centroids = du.find_unique_centroids(d3w.cat, separation=args.max_sep, plot=args.plot)
    # print("stacked_centroids:")
    # print(stacked_centroids)
    print(f"Total time: {du.elapsed_time(t0)}")
    exit()

    # Example 2, find repeating soueces
    table_centroids = du.find_repeating_sources(d3w.cat, separation=args.max_sep, plot=args.plot, outdir=args.outdir)
    stacked_centroids = du.find_unique_centroids(table_centroids, separation=args.max_sep, plot=args.plot)
    print("stacked_centroids:")
    print(stacked_centroids)
    print(f"Total time: {du.elapsed_time(t0)}")
